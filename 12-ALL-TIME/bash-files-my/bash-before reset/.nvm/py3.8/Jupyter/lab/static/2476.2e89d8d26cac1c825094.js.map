{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/jupyter-offlinenotebook/lib/jslib/offlinenotebook.js","webpack://@jupyterlab/application-top/./node_modules/jupyter-offlinenotebook/lib/index.js"],"names":["_repoid","_repoLabel","_binderRefUrl","_binderPersistentUrl","db","dbname","OfflinenotebookDatabase","super","this","version","stores","offlinenotebook","table","initialise","data","console","log","getDb","saveNotebook","path","nb","success","error","primaryKey","put","pk","repoid","name","replace","format","type","content","then","key","catch","e","loadNotebook","get","downloadNotebookFromBrowser","blob","Blob","JSON","stringify","url","window","URL","createObjectURL","a","document","createElement","body","appendChild","href","style","display","download","click","revokeObjectURL","removeChild","openBinderRepo","target","repoLabel","binderRefUrl","binderPersistentUrl","CSS_ICON_CLASS","extension","activate","id","autoStart","OfflineNotebookButtons","panel","context","buttons","push","ToolbarButton","className","iconClass","onClick","tooltip","label","localstoreSaveNotebook","localstoreLoadNotebook","repoIcons","GitHub","GitLab","Git","showBinderLink","reverse","forEach","item","toolbar","insertItem","DisposableDelegate","dispose","formatRepoPathforDialog","_a","model","toJSON","showErrorMessage","repopathDisplay","showDialog","title","Dialog","hasKey","obj","result","contentsKey","button","accept","isDisposed","fromJSON","CopyShareURLWidget","Widget","binderUrl","node","createCopyShareURLNode","copyLinkIntoClipboard","b","$temp","parent","append","val","select","execCommand","remove","text","class","encodeURIComponent","app","baseUrl","PageConfig","docRegistry","addWidgetExtension"],"mappings":"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","file":"2476.2e89d8d26cac1c825094.js","sourcesContent":["import Dexie from 'dexie';\nlet _repoid = null;\nlet _repoLabel = null;\nlet _binderRefUrl = null;\nlet _binderPersistentUrl = null;\nlet db = null;\nconst dbname = 'jupyter-offlinenotebook';\nclass OfflinenotebookDatabase extends Dexie {\n    constructor() {\n        super(dbname);\n        // Define tables and indexes\n        this.version(1).stores({\n            offlinenotebook: 'pk, repoid, name, type',\n        });\n        // The following lines are needed for it to work across typescipt using babel-preset-typescript:\n        this.offlinenotebook = this.table('offlinenotebook');\n    }\n}\nexport function initialise(data) {\n    _repoid = data['repoid'];\n    if (_repoid) {\n        console.log('offline-notebook repoid: ' + _repoid);\n    }\n    else {\n        console.log('offline-notebook repoid not found, disabled');\n    }\n    _repoLabel = data['binder_repo_label'] || 'Repo';\n    console.log('offline-notebook repoLabel: ' + _repoLabel);\n    _binderRefUrl = data['binder_ref_url'];\n    console.log('offline-notebook binderRefUrl: ' + _binderRefUrl);\n    _binderPersistentUrl = data['binder_persistent_url'];\n    console.log('offline-notebook binderPersistentUrl: ' + _binderPersistentUrl);\n}\nfunction getDb() {\n    if (!db) {\n        db = new OfflinenotebookDatabase();\n        console.log('offline-notebook: Opened IndexedDB');\n    }\n    return db;\n}\nexport function saveNotebook(path, nb, success, error) {\n    const primaryKey = 'repoid:' + _repoid + ' path:' + path;\n    getDb()\n        .offlinenotebook.put({\n        pk: primaryKey,\n        repoid: _repoid,\n        name: path.replace(/.*\\//, ''),\n        path: path,\n        format: 'json',\n        type: 'notebook',\n        content: nb,\n    })\n        .then((key) => success(key))\n        .catch((e) => error(e));\n}\nexport function loadNotebook(path, success, error) {\n    const primaryKey = 'repoid:' + _repoid + ' path:' + path;\n    getDb()\n        .offlinenotebook.get(primaryKey)\n        .then((key) => success(key))\n        .catch((e) => error(e));\n}\n// Download https://jsfiddle.net/koldev/cW7W5/\nexport function downloadNotebookFromBrowser(name, nb) {\n    const blob = new Blob([JSON.stringify(nb)], {\n        // https://jupyter.readthedocs.io/en/latest/reference/mimetype.html\n        type: 'application/x-ipynb+json',\n    });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.href = url;\n    a.style.display = 'none';\n    a.download = name;\n    console.log('offlinenotebook: ' + name, blob);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n}\nexport function openBinderRepo() {\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.href = _binderRefUrl;\n    a.target = '_blank';\n    a.style.display = 'none';\n    a.click();\n    document.body.removeChild(a);\n}\nexport function repoid() {\n    return _repoid;\n}\nexport function repoLabel() {\n    return _repoLabel;\n}\nexport function binderRefUrl() {\n    return _binderRefUrl;\n}\nexport function binderPersistentUrl() {\n    return _binderPersistentUrl;\n}\n","import { DisposableDelegate } from '@lumino/disposable';\nimport { Widget } from '@lumino/widgets';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { showDialog, showErrorMessage, Dialog, ToolbarButton, } from '@jupyterlab/apputils';\nimport * as offline from './jslib/offlinenotebook';\nimport $ from 'jquery';\n/**\n * The CSS class for a Toolbar icon.\n */\nconst CSS_ICON_CLASS = 'jp-OfflineNotebookToolbarIcon';\n/**\n * The plugin registration information.\n */\nconst extension = {\n    activate,\n    id: 'offlinenotebook:offlineNotebookButtons',\n    autoStart: true,\n};\n/**\n * A notebook widget extension that adds a button to the toolbar.\n */\nexport class OfflineNotebookButtons {\n    /**\n     * Create a new extension object.\n     */\n    createNew(panel, context) {\n        // https://stackoverflow.com/a/40679225\n        // For debugging in browser console assign panel to a global var\n        // eval(\"window.jlpanel = panel;\");\n        // https://jupyterlab.github.io/jupyterlab/apputils/classes/toolbarbutton.html\n        // https://jupyterlab.github.io/jupyterlab/apputils/interfaces/toolbarbuttoncomponent.iprops.html\n        const buttons = [];\n        buttons.push([\n            'downloadVisible',\n            new ToolbarButton({\n                className: 'downloadVisible',\n                iconClass: 'fas fa-download ' + CSS_ICON_CLASS,\n                onClick: () => {\n                    downloadNotebookFromBrowser(panel);\n                },\n                tooltip: 'Download visible',\n                label: 'Download',\n            }),\n        ]);\n        if (offline.repoid()) {\n            buttons.push([\n                'saveToBrowser',\n                new ToolbarButton({\n                    className: 'saveToBrowser',\n                    iconClass: 'fas fa-cloud-download-alt ' + CSS_ICON_CLASS,\n                    onClick: () => {\n                        localstoreSaveNotebook(panel);\n                    },\n                    tooltip: 'Save to browser storage',\n                }),\n            ]);\n            buttons.push([\n                'loadFromBrowser',\n                new ToolbarButton({\n                    className: 'loadFromBrowser',\n                    iconClass: 'fas fa-cloud-upload-alt ' + CSS_ICON_CLASS,\n                    onClick: () => {\n                        localstoreLoadNotebook(panel);\n                    },\n                    tooltip: 'Restore from browser storage',\n                }),\n            ]);\n        }\n        if (offline.binderRefUrl()) {\n            const repoIcons = {\n                GitHub: 'fab fa-github',\n                GitLab: 'fab fa-gitlab',\n                Git: 'fab fa-git',\n            };\n            buttons.push([\n                'openRepo',\n                new ToolbarButton({\n                    className: 'openRepo',\n                    iconClass: (repoIcons[offline.repoLabel()] || 'fas fa-external-link-alt') +\n                        ' ' +\n                        CSS_ICON_CLASS,\n                    onClick: offline.openBinderRepo,\n                    tooltip: 'Visit Binder repository',\n                    label: offline.repoLabel(),\n                }),\n            ]);\n        }\n        if (offline.binderPersistentUrl()) {\n            buttons.push([\n                'linkToBinder',\n                new ToolbarButton({\n                    className: 'linkToBinder',\n                    iconClass: 'fas fa-link ' + CSS_ICON_CLASS,\n                    onClick: () => {\n                        showBinderLink(panel);\n                    },\n                    tooltip: 'Link to this Binder',\n                    label: 'Binder',\n                }),\n            ]);\n        }\n        buttons.reverse();\n        buttons.forEach((item) => {\n            panel.toolbar.insertItem(9, item[0], item[1]);\n        });\n        return new DisposableDelegate(() => {\n            buttons.forEach((item) => {\n                item[1].dispose();\n            });\n        });\n    }\n}\nfunction formatRepoPathforDialog(path) {\n    return 'repoid: ' + offline.repoid() + ' path: ' + path;\n}\n// function getNotebookFromBrowser(): null {\n//   return Jupyter.notebook.toJSON();\n// }\nfunction localstoreSaveNotebook(panel) {\n    var _a;\n    const path = panel.context.path;\n    const nb = (_a = panel.content.model) === null || _a === void 0 ? void 0 : _a.toJSON();\n    if (!nb) {\n        const e = 'Content model is null';\n        showErrorMessage('Local storage error', e);\n        throw e;\n    }\n    const repopathDisplay = formatRepoPathforDialog(path);\n    offline.saveNotebook(path, nb, (key) => {\n        console.log('offline-notebook saved: ', key);\n        return showDialog({\n            title: 'Notebook saved to browser storage',\n            body: repopathDisplay,\n            buttons: [Dialog.okButton()],\n        });\n    }, (e) => {\n        showErrorMessage('Local storage IndexedDB error', e);\n        throw e;\n    });\n}\n// Workround error in nb['contents']\n// Element implicitly has an 'any' type because expression of type '\"contents\"' can't be used to index type 'string | number | true | JSONObject | JSONArray'.\n// Property 'contents' does not exist on type 'string | number | true | JSONObject | JSONArray'.ts(7053)\n// https://dev.to/kingdaro/indexing-objects-in-typescript-1cgi\nfunction hasKey(obj, key) {\n    return key in obj;\n}\nfunction localstoreLoadNotebook(panel) {\n    const path = panel.context.path;\n    const repopathDisplay = formatRepoPathforDialog(path);\n    const key = 'repoid:' + offline.repoid() + ' path:' + path;\n    offline.loadNotebook(path, (nb) => {\n        if (nb) {\n            console.log('offline-notebook found ' + key);\n            return showDialog({\n                title: 'This will replace your current notebook with',\n                body: repopathDisplay,\n                buttons: [Dialog.cancelButton(), Dialog.warnButton({ label: 'OK' })],\n            }).then((result) => {\n                const contentsKey = 'content';\n                if (result.button.accept && !panel.context.isDisposed) {\n                    if (hasKey(nb, contentsKey)) {\n                        panel.context.model.fromJSON(nb[contentsKey]);\n                    }\n                    else {\n                        showErrorMessage('Invalid notebook', '\"content\" not found');\n                    }\n                }\n            });\n        }\n        else {\n            console.log('offline-notebook not found ' + key);\n            showErrorMessage('Notebook not found in browser storage', key);\n        }\n    }, (e) => {\n        showErrorMessage('Local storage IndexedDB error', e);\n        throw e;\n    });\n}\nfunction downloadNotebookFromBrowser(panel) {\n    var _a;\n    const name = panel.context.path.replace(/.*\\//, '');\n    const nb = (_a = panel.content.model) === null || _a === void 0 ? void 0 : _a.toJSON();\n    if (!nb) {\n        const e = 'Content model is null';\n        showErrorMessage('Local storage error', e);\n        throw e;\n    }\n    offline.downloadNotebookFromBrowser(name, nb);\n}\nclass CopyShareURLWidget extends Widget {\n    constructor(binderUrl) {\n        super({ node: createCopyShareURLNode(binderUrl) });\n    }\n}\n// https://github.com/jupyterhub/binderhub/blob/b32ad4425be3319f7a2c59cf8253e979512b955d/examples/appendix/static/custom.js#L1-L7\nfunction copyLinkIntoClipboard(b) {\n    const $temp = $('<input>');\n    $(b).parent().append($temp);\n    $temp.val($(b).data('url')).select();\n    document.execCommand('copy');\n    $temp.remove();\n}\nfunction createCopyShareURLNode(binderUrl) {\n    const body = $('<div/>', {\n        style: 'flex-direction: row;',\n        'data-url': binderUrl,\n    }).append($('<pre/>', {\n        text: binderUrl,\n        style: 'margin: 0; white-space: pre-wrap; word-break: break-all;',\n    }));\n    const button = $('<button/>', {\n        title: 'Copy binder link to clipboard',\n        'data-url': binderUrl,\n    }).click(() => {\n        copyLinkIntoClipboard(button);\n    });\n    button.append($('<i/>', {\n        class: 'fas fa-clipboard',\n    }));\n    body.append(button);\n    // Unwrap JQuery object\n    return body.get(0);\n}\n// TODO: Format link and copy it\nfunction showBinderLink(panel) {\n    const path = panel.context.path;\n    const binderUrl = offline.binderPersistentUrl() +\n        '?urlpath=' +\n        encodeURIComponent('lab/tree/' + path);\n    // Note adding a copy button here doesn't work, perhaps because the event goes\n    // through too many steps (firefox only allows \"copy\" on certain actions)\n    return showDialog({\n        title: 'Share Binder link',\n        body: new CopyShareURLWidget(binderUrl),\n        buttons: [Dialog.okButton()],\n    });\n}\n/**\n * Activate the extension.\n */\nfunction activate(app) {\n    console.log('Activating jupyter-offlinenotebook JupyterLab extension');\n    const baseUrl = PageConfig.getBaseUrl();\n    $.getJSON(baseUrl + 'offlinenotebook/config', (data) => {\n        offline.initialise(data);\n        // addButtons();\n    });\n    app.docRegistry.addWidgetExtension('Notebook', new OfflineNotebookButtons());\n}\n/**\n * Export the extension as default.\n */\nexport default extension;\n"],"sourceRoot":""}